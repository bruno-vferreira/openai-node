"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 1.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = exports.API_TYPE = void 0;
const packageJson = require("../package.json");
var API_TYPE;
(function (API_TYPE) {
    API_TYPE["Azure"] = "azure";
    API_TYPE["OpenAi"] = "openai";
    API_TYPE["AzureAD"] = "azuread";
})(API_TYPE = exports.API_TYPE || (exports.API_TYPE = {}));
class Configuration {
    constructor(param = {}) {
        this.apiType = param.apiType || API_TYPE.OpenAi;
        this.apiKey = param.apiKey;
        this.organization = param.organization;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.apiVersion = param.apiVersion;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions) {
            this.baseOptions = {};
        }
        switch (this.apiType) {
            case API_TYPE.OpenAi: {
                this.baseOptions.headers = Object.assign({ 'Authorization': `Bearer ${this.apiKey}` }, this.baseOptions.headers);
                if (!this.apiVersion)
                    throw new Error('Azure AD required apiVersion');
                break;
            }
            case API_TYPE.AzureAD: {
                this.baseOptions.headers = Object.assign({ 'api-key': this.apiKey }, this.baseOptions.headers);
                break;
            }
        }
        this.baseOptions.headers = Object.assign({ 'User-Agent': `OpenAI/NodeJS/${packageJson.version}` }, this.baseOptions.headers);
        if (this.organization) {
            this.baseOptions.headers['OpenAI-Organization'] = this.organization;
        }
        if (!this.formDataCtor) {
            this.formDataCtor = require("form-data");
        }
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
exports.Configuration = Configuration;
